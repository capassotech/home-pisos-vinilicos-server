@page "/login"
@layout LoginLayout

<head>
    <link href="css/login.css" rel="stylesheet" />
</head>

@using home_pisos_vinilicos.Application.Interfaces
@using home_pisos_vinilicos.Application.Services
@using home_pisos_vinilicos.Domain.Models
@inject NavigationManager Navigation
@inject IAuthenticationService AuthenticationService

<div class="container">
    <div class="wrapper">
        <form @onsubmit="HandleLogin">
            <p class="form-login">Login</p>

            <div class="input-box">
                <input @bind="email" required placeholder="Email" type="email" />
                @if (!string.IsNullOrEmpty(emailError))
                {
                    <p class="error-message">@emailError</p>
                }
            </div>

            <div class="input-box">
                <input @bind="password" required placeholder="Password" type="password" />
                @if (!string.IsNullOrEmpty(passwordError))
                {
                    <p class="error-message">@passwordError</p>
                }
            </div>

            <div class="remember-forgot">
                <a href="/recuperar-password">Forgot Password</a>
            </div>

            <button class="btn" type="submit">Login</button>

            @if (!string.IsNullOrEmpty(loginResult))
            {
                <p class="login-result">@loginResult</p>
            }

        </form>
    </div>
</div>

@code {
    private string email;
    private string password;
    private string name;
    private string loginResult;
    private string emailError;
    private string passwordError;

    private async Task HandleLogin()
    {
        if (string.IsNullOrEmpty(email))
        {
            emailError = "El campo de email es requerido.";
        }
        else
        {
            emailError = null;
        }

        if (string.IsNullOrEmpty(password))
        {
            passwordError = "El campo de contraseña es requerido.";
        }
        else
        {
            passwordError = null;
        }

        if (!string.IsNullOrEmpty(emailError) || !string.IsNullOrEmpty(passwordError))
        {
            return;
        }


        var result = await AuthenticationService.LoginAsync(email, password);

        if (result.IsSuccess)
        {
            Navigation.NavigateTo("/product-management");
        }
    }
}
