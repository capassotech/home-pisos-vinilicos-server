@page "/add-product"
@inject ProductService productService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using home_pisos_vinilicos.Application
@using home_pisos_vinilicos.Application.DTOs
@using home_pisos_vinilicos.Application.Services
@using Microsoft.AspNetCore.Components.Forms
@using System.IO

<head>
    <link href="css/addProduct.css" rel="stylesheet" />
</head>

<div class="add-product-container">
    <h3>Agregar Nuevo Producto</h3>

    <div class="form-add-product">
        <div>
            <label>Nombre:</label>
            <input @bind="productDto.Name" class="form-control" />
        </div>
        <div>
            <label>Descripción:</label>
            <input @bind="productDto.Description" class="form-control" />
        </div>
        <div>
            <label>Precio:</label>
            <input @bind="productDto.Price" type="number" class="form-control" />
        </div>
        

        <button class="btn btn-primary mt-3" @onclick="SaveProduct">Guardar Producto</button>
    </div>
</div>

@code {
    private ProductDto productDto = new ProductDto();
    private IBrowserFile selectedFile;
    private string imageUrl;

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        await LoadImage(selectedFile);
    }

    private async Task LoadImage(IBrowserFile file)
    {
        var buffers = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffers);
        string imageType = file.ContentType;
        imageUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";
        StateHasChanged();
    }

    private async Task SaveProduct()
    {
        try
        {
            if (selectedFile != null)
            {
                var imageUrl = await UploadImage(selectedFile);
                productDto.Image = imageUrl;
            }

            var success = await productService.SaveAsync(productDto);
            if (success)
            {
                NavigationManager.NavigateTo("/product-management");
            }
            else
            {
                Console.WriteLine("Error al guardar el producto.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task<string> UploadImage(IBrowserFile file)
    {
        var maxAllowedSize = 1024 * 1024; // 1MB
        var resizedImageFile = await file.RequestImageFileAsync("image/jpeg", 800, 600);

        using var stream = resizedImageFile.OpenReadStream(maxAllowedSize);
        var buffer = new byte[resizedImageFile.Size];
        await stream.ReadAsync(buffer);

        var base64Image = Convert.ToBase64String(buffer);
        var imageUrl = await JSRuntime.InvokeAsync<string>("uploadImageToFirebase", base64Image, productDto.Name);

        return imageUrl;
    }
}