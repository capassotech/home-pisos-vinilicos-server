@page "/price-update"
@using home_pisos_vinilicos.Application.Services
@inject ProductService ProductService
@inject CategoryService CategoryService
@inject IJSRuntime JSRuntime

<h3>Actualización de Precios</h3>

<EditForm Model="@updateModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Seleccionar Categorías:</label>
        @foreach (var category in categories)
        {
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="category.IsSelected" id="@category.IdCategory" />
                <label class="form-check-label" for="@category.IdCategory">
                    @category.Name
                </label>
            </div>
        }
    </div>

    <div class="form-group">
        <label for="updateFactor">Factor de Actualización:</label>
        <input type="number" class="form-control" id="updateFactor" @bind="updateModel.UpdateFactor" step="0.01" />
    </div>

    <div class="form-group">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" @bind="updateModel.IsPercentage" id="isPercentage" />
            <label class="form-check-label" for="isPercentage">
                Es Porcentaje
            </label>
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Aplicar Cambios</button>
</EditForm>

@code {
    private List<CategoryViewModel> categories = new List<CategoryViewModel>();
    private PriceUpdateDto updateModel = new PriceUpdateDto();

    protected override async Task OnInitializedAsync()
    {
        var allCategories = await CategoryService.GetAllAsync();
        categories = allCategories.Select(c => new CategoryViewModel
        {
            IdCategory = c.IdCategory,
            Name = c.Name,
            IsSelected = false
        }).ToList();
    }

    private async Task HandleValidSubmit()
    {
        var selectedCategories = categories.Where(c => c.IsSelected).Select(c => c.IdCategory).ToList();
        if (selectedCategories.Count == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Por favor, seleccione al menos una categoría.");
            return;
        }

        updateModel.CategoryIds = selectedCategories;

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro de que desea actualizar los precios? Esta acción no se puede deshacer.");
        if (confirmed)
        {
            var result = await ProductService.UpdatePricesAsync(updateModel);
            if (result)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Precios actualizados con éxito.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Hubo un error al actualizar los precios.");
            }
        }
    }

    private class CategoryViewModel
    {
        public string IdCategory { get; set; }
        public string Name { get; set; }
        public bool IsSelected { get; set; }
    }
}