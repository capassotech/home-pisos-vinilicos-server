@page "/preguntas-frecuentes"
@using home_pisos_vinilicos.Application
@using home_pisos_vinilicos.Application.DTOs
@using home_pisos_vinilicos.Application.Services
@using home_pisos_vinilicos.Domain.Entities
@using System.Net.Http.Json
@inject IJSRuntime JSRuntime
@inject FAQService faqService

<head>
    <link href="css/faqManagement.css" rel="stylesheet" />
</head>

<div class="container-management-faq">

    <h3 class="title-faq">Gestión de Preguntas Frecuentes</h3>

    <button type="submit" @onclick="ShowAddFAQModal" class="button-add" aria-label="Click me">
        <i class="fas fa-plus"></i> Nueva pregunta
    </button>

    <table class="table table-faq-questions">
        <thead>
            <tr>
                <th>Pregunta</th>
                <th>Respuesta</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var faq in faqs)
            {
                <tr>
                    <td>@faq.Question</td>
                    <td>@faq.Answer</td>
                    <td>
                        <button class="btn btn" @onclick="() => ShowEditFAQModal(faq)">
                            <i class="fas fa-pencil-alt"></i>
                        </button>
                        <button class="btn btn-danger" @onclick="() => DeleteFAQ(faq.IdFAQ)">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (isModalVisible)
    {
        <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0, 0, 0, 0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(faqModel.IdFAQ == null ? "Agregar Pregunta Frecuente" : "Editar Pregunta Frecuente")</h5>
                        <button type="button" class="close" aria-label="Close" @onclick="CloseModal">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>

                    <div class="modal-body">
                        <EditForm Model="@faqModel" OnValidSubmit="HandleValidSubmit" class="edit-form">
                            <DataAnnotationsValidator />

                            <div class="form-group">
                                <label for="question">Pregunta</label>
                                <InputText id="question" class="form-control" @bind-Value="faqModel.Question" required />
                                <ValidationMessage For="@(() => faqModel.Question)" class="text-danger" />
                            </div>

                            <div class="form-group">
                                <label for="answer">Respuesta</label>
                                <InputTextArea id="answer" class="form-control" @bind-Value="faqModel.Answer" required />
                                <ValidationMessage For="@(() => faqModel.Answer)" class="text-danger" />
                            </div>
                        </EditForm>
                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Guardar</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    </div>
                </div>
            </div>
        </div>
    }

</div>

@code {
    private List<FAQ> faqs = new();
    private FAQDto faqModel = new();
    private bool isModalVisible = false;
    private string modalTitle = "Agregar Pregunta";

    protected override async Task OnInitializedAsync()
    {
        await LoadFAQs();
    }

    private async Task LoadFAQs()
    {
        faqs = await faqService.GetAllAsync();
    }

    private void ShowAddFAQModal()
    {
        faqModel = new FAQDto();
        modalTitle = "Agregar Pregunta";
        isModalVisible = true;
    }

    private void ShowAlert(string message)
    {
        JSRuntime.InvokeVoidAsync("alert", message);
    }

    private void ShowEditFAQModal(FAQ faq)
    {
        faqModel = new FAQDto
            {
                IdFAQ = faq.IdFAQ,
                Question = faq.Question,
                Answer = faq.Answer
            };
        modalTitle = "Editar Pregunta";
        isModalVisible = true;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (string.IsNullOrEmpty(faqModel.IdFAQ))
            {
                await faqService.SaveAsync(faqModel);
                ShowAlert("Pregunta añadida correctamente.");
            }
            else
            {
                await faqService.UpdateAsync(faqModel);
                ShowAlert("Pregunta actualizada correctamente.");
            }

            await LoadFAQs();
            isModalVisible = false;
        }
        catch (Exception ex)
        {
            ShowAlert($"Error al guardar la pregunta: {ex.Message}");
        }
    }

    private async Task DeleteFAQ(string idFAQ)
    {
        try
        {
            await faqService.DeleteAsync(idFAQ);
            ShowAlert("Pregunta eliminada correctamente.");
            await LoadFAQs();
        }
        catch (Exception ex)
        {
            ShowAlert($"Error al eliminar la pregunta: {ex.Message}");
        }
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }
}
