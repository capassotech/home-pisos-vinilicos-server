@page "/product-management"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using home_pisos_vinilicos.Shared.DTOs
@using System.Net.Http.Json
@using home_pisos_vinilicos.Application
@inject ProductService productService

<head>
    <link href="css/productManagement.css" rel="stylesheet" />
</head>

<div class="container-management-products">
    <h3 class="title-products">Productos en la tienda</h3>

    <!-- Filtros y Búsqueda -->
    <div class="search">
        <input type="text" @bind="searchText" placeholder="Buscar productos..." class="form-control" />
        <button @onclick="FilterProducts">
            <i class="fas fa-search"></i>
        </button>
    </div>

    <button type="submit" @onclick="AddNewProduct" class="button-add" aria-label="Click me">
        <i class="fas fa-plus"></i> AGREGAR NUEVO PRODUCTO
    </button>

    <!-- Formulario de Edición -->
    @if (editingProduct != null)
    {
        <div class="edit-form">
            <h4>Editar Producto</h4>
            <input type="text" @bind="editingProduct.Name" placeholder="Nombre" />
            <input type="text" @bind="editingProduct.Description" placeholder="Categoría" />
            <input type="number" @bind="editingProduct.Price" placeholder="Precio" />
            <button @onclick="SaveProduct">Guardar</button>
            <button @onclick="CancelEdit">Cancelar</button>
        </div>
    }

    <!-- Tabla de Productos -->
    @if (filteredProducts != null && filteredProducts.Any())
    {
        <table class="table table-striped table-products">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Categoría</th>
                    <th>Precio</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in filteredProducts)
                {
                    <tr class="@GetHighlightClass(product)">
                        <td>@product.Name</td>
                        <td>@product.Description</td>
                        <td>@product.Price.ToString("C")</td>
                        <td>
                            <button class="btn btn-sm" @onclick="() => StartEditProduct(product)">
                                <i class="fas fa-pencil-alt"></i>
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(product.IdProduct)">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No se encontraron productos.</p>
    }
</div>

@code {
    private List<ProductDto> products;
    private List<ProductDto> filteredProducts;
    private ProductDto editingProduct;
    private string searchText = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var productEntities = await productService.GetAllAsync();
            products = productEntities.Select(p => new ProductDto
                {
                    IdProduct = p.IdProduct,
                    Name = p.Name,
                    Description = p.Description,
                    Price = p.Price
                }).ToList();

            filteredProducts = products;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar productos: {ex.Message}");
        }
    }

    protected void FilterProducts()
    {
        if (products != null)
        {
            filteredProducts = products
                .Where(p => string.IsNullOrEmpty(searchText) || p.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    protected void AddNewProduct()
    {
        Console.WriteLine("Botón de agregar nuevo producto clickeado.");
        NavigationManager.NavigateTo("/add-product");
    }

    protected void StartEditProduct(ProductDto product)
    {
        editingProduct = new ProductDto
            {
                IdProduct = product.IdProduct,
                Name = product.Name,
                Description = product.Description,
                Price = product.Price
            };
    }

    protected async Task SaveProduct()
    {
        if (editingProduct == null)
        {
            Console.WriteLine("No hay un producto en edición.");
            return;
        }

        try
        {
            var response = await Http.PutAsJsonAsync($"api/product/update/{editingProduct.IdProduct}", editingProduct);
            if (response.IsSuccessStatusCode)
            {
                var updatedProduct = await response.Content.ReadFromJsonAsync<ProductDto>();
                var index = products.FindIndex(p => p.IdProduct == updatedProduct.IdProduct);
                if (index != -1)
                {
                    products[index] = updatedProduct;
                    FilterProducts();
                    Console.WriteLine("Producto actualizado exitosamente.");
                }
                editingProduct = null; 
            }
            else
            {
                Console.WriteLine($"Error al actualizar el producto: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar el producto: {ex.Message}");
        }
    }

    protected void CancelEdit()
    {
        editingProduct = null; 
    }

    protected async Task DeleteProduct(string id)
    {
        var success = await productService.DeleteAsync(id);
        if (success)
        {
            products.Remove(products.First(p => p.IdProduct == id));
            FilterProducts();
            Console.WriteLine("Producto eliminado exitosamente.");
        }
        else
        {
            Console.WriteLine("No se pudo eliminar el producto.");
        }
    }
    private string GetHighlightClass(ProductDto product)
    {
        var recentProducts = products.OrderByDescending(p => p.IdProduct).Take(6).Select(p => p.IdProduct).ToList();
        return recentProducts.Contains(product.IdProduct) ? "highlight" : "";
    }
}
