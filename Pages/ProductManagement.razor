@page "/product-management"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.Net.Http.Json
@using home_pisos_vinilicos.Application
@using home_pisos_vinilicos.Application.DTOs
@using home_pisos_vinilicos.Application.Services
@inject ProductService productService

<head>
    <link href="css/productManagement.css" rel="stylesheet" />
</head>

<div class="container-management-products">
    <h3 class="title-products">Productos en la tienda</h3>

    <!-- Filtros y Búsqueda -->
    <div class="container-buttons">
        <div class="container-search">
            <div class="search">
                <input type="text" @bind="searchText" placeholder="Nombre" class="form-control" />
                <button @onclick="FilterProducts">Buscar</button>
            </div>
            <div class="search">
                <input type="text" @bind="searchText" placeholder="Descripcion" class="form-control" />
                <button @onclick="FilterProducts">Buscar</button>
            </div>
        </div>

        <button type="submit" @onclick="AddNewProduct" class="button-add" aria-label="Click me">
            <i class="fas fa-plus"></i> AGREGAR NUEVO PRODUCTO
        </button>
    </div>

    <!-- Formulario de Edición -->
    @if (isModalOpen)
    {
        <div class="edit-form">
            <h4>@(isNewProduct ? "Agregar Nuevo Producto" : "Editar Producto")</h4>

            @if (!isNewProduct)
            {
                <p>ID del Producto: @editingProduct.IdProduct</p>
            }

            <input type="text" @bind="editingProduct.Name" placeholder="Nombre" />
            <input type="text" @bind="editingProduct.Description" placeholder="Descripción" />
            <input type="number" @bind="editingProduct.Price" placeholder="Precio" />
            <input type="number" @bind="editingProduct.Size" placeholder="Tamaño" />
            <input type="text" @bind="editingProduct.Color" placeholder="Color" />
            <input type="number" @bind="editingProduct.Quantity" placeholder="Cantidad" />
            <input type="text" @bind="editingProduct.Model" placeholder="Modelo" />
            <input type="text" @bind="editingProduct.Dimensions" placeholder="Dimensiones" />
            <input type="number" @bind="editingProduct.SurfacePerBox" placeholder="Superficie por Caja" />
            <input type="number" @bind="editingProduct.PricePerSquareMeter" placeholder="Precio por Metro Cuadrado" />
            <input type="text" @bind="editingProduct.TechnicalSheet" placeholder="Ficha Técnica" />
            <div class="container-buttons">
            <button @onclick="SaveProduct">Guardar</button>
            <button @onclick="CancelEdit">Cancelar</button>
            </div>
        </div>
    }

    <!-- Tabla de Productos -->
    @if (filteredProducts != null && filteredProducts.Any())
    {
        <table class="table table-products">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Categoría</th>
                    <th>Precio</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in GetPaginatedProducts())
                {
                    <tr class="@GetHighlightClass(product)">
                        <td>@product.Name</td>
                        <td>@product.Description</td>
                        <td>$@product.Price</td>
                        <td class="buttons-edition">
                            <button class="btn btn-sm" @onclick="() => StartEditProduct(product)">
                                <i class="fas fa-pencil-alt"></i>
                            </button>
                            <button class="btn btn-sm" @onclick="() => ToggleFeatured(product)">
                                @if (product.IsFeatured)
                                {
                                    <i class="fas fa-star"></i>
                                }
                                else
                                {
                                    <i class="far fa-star"></i>
                                }
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(product.IdProduct)">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Botones de Paginación -->
        <div class="pagination-controls">
            <button @onclick="PreviousPage">
                <i class="fas fa-chevron-left"></i>
            </button>
            <span>Página @currentPage de @totalPages</span>
            <button @onclick="NextPage">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    }
    else
    {
        <p>No se encontraron productos.</p>
    }

    <!-- Tabla de Productos Destacados -->
    @if (featuredProducts != null && featuredProducts.Any())
    {
        <h4 class="title-featured">PRODUCTOS DESTACADOS</h4>

        <table class="table table-featured-products">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Categoría</th>
                    <th>Precio</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in featuredProducts)
                {
                    <tr>
                        <td>@product.Name</td>
                        <td>@product.Description</td>
                        <td>$@product.Price</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
@code {
    private List<ProductDto> products = new List<ProductDto>();
    private List<ProductDto> filteredProducts = new List<ProductDto>();
    private List<ProductDto> featuredProducts = new List<ProductDto>();
    private ProductDto editingProduct = new ProductDto();
    private string searchText = "";
    private bool isNewProduct = true;
    private bool isModalOpen = false;
    private int currentPage = 1;
    private int pageSize = 5; 
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        CalculateTotalPages();
    }

    private async Task LoadProducts()
    {
        try
        {
            var productEntities = await productService.GetAllAsync();
            products = productEntities.Select(p => new ProductDto
                {
                    IdProduct = p.IdProduct,
                    Name = p.Name,
                    Description = p.Description,
                    Price = p.Price,
                    Size = p.Size,
                    Color = p.Color,
                    Quantity = p.Quantity,
                    IsFeatured = p.IsFeatured,
                    Model = p.Model,
                    Dimensions = p.Dimensions,
                    SurfacePerBox = p.SurfacePerBox,
                    RequiresUnderlay = p.RequiresUnderlay,
                    PricePerSquareMeter = p.PricePerSquareMeter,
                    TechnicalSheet = p.TechnicalSheet
                }).ToList();

            filteredProducts = products;
            featuredProducts = products.Where(p => p.IsFeatured).ToList();
            CalculateTotalPages();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar productos: {ex.Message}");
        }
    }

    protected async void AddNewProduct()
    {
        editingProduct = new ProductDto
            {
                Name = "",
                Description = "",
                Price = 0,
                Size = 0,
                Color = "",
                Quantity = 0,
                Model = "",
                Dimensions = "",
                SurfacePerBox = 0,
                PricePerSquareMeter = 0,
                TechnicalSheet = ""
            };

        isNewProduct = true;
        isModalOpen = true;
    }

    protected void StartEditProduct(ProductDto product)
    {
        if (string.IsNullOrEmpty(product.IdProduct))
        {
            Console.WriteLine("Error: El producto no tiene un IdProduct válido.");
            return;
        }

        editingProduct = new ProductDto
            {
                IdProduct = product.IdProduct,
                Name = product.Name,
                Description = product.Description,
                Price = product.Price,
                Size = product.Size,
                Color = product.Color,
                Quantity = product.Quantity,
                Model = product.Model,
                Dimensions = product.Dimensions,
                SurfacePerBox = product.SurfacePerBox,
                PricePerSquareMeter = product.PricePerSquareMeter,
                TechnicalSheet = product.TechnicalSheet,
                IsFeatured = product.IsFeatured,
                RequiresUnderlay = product.RequiresUnderlay
            };
        isNewProduct = false;
        isModalOpen = true;
    }

    private async Task SaveProduct()
    {
        try
        {
            if (isNewProduct)
            {
                Console.WriteLine($"Creando nuevo producto: {editingProduct.Name}");
                var success = await productService.SaveAsync(editingProduct);
                if (success)
                {
                    Console.WriteLine("Producto guardado exitosamente.");
                    products.Add(editingProduct);
                }
                else
                {
                    Console.WriteLine("Error: No se pudo guardar el producto.");
                }
            }
            else
            {
                Console.WriteLine($"Actualizando producto con ID: {editingProduct.IdProduct}");
                await productService.UpdateAsync(editingProduct);
            }

            await LoadProducts();
            isModalOpen = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar el producto: {ex.Message}");
        }
    }

    protected void CancelEdit()
    {
        isModalOpen = false;
    }

    protected async Task DeleteProduct(string id)
    {
        try
        {
            var success = await productService.DeleteAsync(id);
            if (success)
            {
                products.Remove(products.First(p => p.IdProduct == id));
                FilterProducts();
                Console.WriteLine("Producto eliminado exitosamente.");
            }
            else
            {
                Console.WriteLine("No se pudo eliminar el producto.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar el producto: {ex.Message}");
        }
    }

    protected async Task ToggleFeatured(ProductDto product)
    {
        try
        {
            product.IsFeatured = !product.IsFeatured;
            await productService.UpdateAsync(product);
            await LoadProducts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al destacar el producto: {ex.Message}");
        }
    }

    private string GetHighlightClass(ProductDto product)
    {
        var recentProducts = products.OrderByDescending(p => p.IdProduct).Take(6).Select(p => p.IdProduct).ToList();
        return recentProducts.Contains(product.IdProduct) ? "highlight" : "";
    }

    protected void FilterProducts()
    {
        filteredProducts = products
            .Where(p => string.IsNullOrEmpty(searchText) || p.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .ToList();

        CalculateTotalPages(); 
        currentPage = 1; 
    }

    private List<ProductDto> GetPaginatedProducts()
    {
        return filteredProducts
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void CalculateTotalPages()
    {
        totalPages = (int)Math.Ceiling(filteredProducts.Count / (double)pageSize);
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }
}

