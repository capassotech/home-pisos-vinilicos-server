@page "/productos"
@using System.Net.Http.Json
@using home_pisos_vinilicos.Application
@using home_pisos_vinilicos.Application.DTOs
@using home_pisos_vinilicos.Application.Services
@using home_pisos_vinilicos.Data.Repositories.IRepository
@inject ProductService productService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject CategoryService categoryService
@inject IProductRepository fs
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<head>
    <link href="css/productManagement.css" rel="stylesheet" />
    <title>Gestión de Productos</title>
</head>

<div class="container-management-products">
    <h3 class="title-products">Gestión de Productos</h3>

    <!-- Filtros y Búsqueda -->
    <div class="container-buttons">
        <div class="container-search">
            <div class="search">
                <input type="text" @bind="searchText" placeholder="Nombre" class="form-control" />
                <button @onclick="FilterProducts">Buscar</button>
            </div>
        <button type="submit" @onclick="AddNewProduct" class="button-add" aria-label="Click me">
            <i class="fas fa-plus"></i> Nuevo producto
        </button>
        </div>

    </div>

    @if (isModalOpen)
    {
        <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0, 0, 0, 0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isNewProduct ? "Agregar Nuevo Producto" : "Editar Producto")</h5>
                        <button type="button" class="close" aria-label="Close" @onclick="CancelEdit">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>

                    <div class="modal-body">
                        <EditForm Model="@editingProduct" OnValidSubmit="SaveProduct">
                            <DataAnnotationsValidator />

                            <div class="form-group">
                                <label for="name">Nombre del producto</label>
                                <InputText id="name" class="form-control" @bind-Value="editingProduct.Name" />
                                <ValidationMessage For="@(() => editingProduct.Name)" class="text-danger" />
                            </div>

                            <br/>

                            <div class="form-group">
                                <label for="price">Precio</label>
                                <InputNumber id="price" class="form-control" @bind-Value="editingProduct.Price" step="0.01" />
                                <ValidationMessage For="@(() => editingProduct.Price)" class="text-danger" />
                            </div>
                            
                            <br/>

                            <div class="form-group">
                                <label for="description">Descripción</label>
                                <InputTextArea id="description" class="form-control" @bind-Value="editingProduct.Description" />
                                <ValidationMessage For="@(() => editingProduct.Description)" class="text-danger" />
                            </div>
                            
                            <br/>

                            <div class="form-group">
                                <label for="size">Tamaño</label>
                                <InputText id="size" class="form-control" @bind-Value="editingProduct.Size" />
                                <ValidationMessage For="@(() => editingProduct.Size)" class="text-danger" />
                            </div>
                            
                            <br/>

                            <div class="form-group form-check">
                                <InputCheckbox id="isFeatured" class="form-check-input" @bind-Value="editingProduct.IsFeatured" @onclick="OnFeaturedChange" />
                                <label for="isFeatured" class="form-check-label">Destacar producto</label>
                                @if (errorFeaturedLimit)
                                {
                                        <div class="text-danger mt-2">No se pueden destacar más de 6 productos.</div>
                                }
                            </div>
                            <br/>

                            <div class="form-group">
                                <label for="priceType">Tipo de Precio</label>
                                <InputText id="priceType" class="form-control" @bind-Value="editingProduct.PriceType" />
                                <ValidationMessage For="@(() => editingProduct.PriceType)" class="text-danger" />
                            </div>

                            <br/>

                            <div class="form-group">
                                <label for="cod_Art">Codigo de Articulo</label>
                                <InputText id="cod_Art" class="form-control" @bind-Value="editingProduct.Cod_Art" />
                                <ValidationMessage For="@(() => editingProduct.Cod_Art)" class="text-danger" />
                            </div>

                            <br/>

                            <div class="form-group">
                                <label>Imágenes:</label>
                                <InputFile OnChange="OnFileSelected" accept="image/*" multiple />

                                @if (Images != null && Images.Any())
                                {
                                    <div class="mt-2 d-flex flex-wrap">
                                        @foreach (var image in Images)
                                        {
                                            <img src="@image" alt="Vista previa" class="img-thumbnail m-2" style="max-width: 200px; max-height: 200px;" />
                                        }
                                    </div>
                                }
                            </div>


                            <br/>

                            <div class="form-group">
                                <label for="category">Categoría</label>
                                @if (categories != null && categories.Any())
                                {
                                    <select id="category" class="form-control" @bind="editingProduct.IdCategory">
                                        <option value="">Selecciona una categoría</option>
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.IdCategory">@category.Name</option>
                                        }
                                    </select>
                                }
                                else
                                {
                                    <p>No hay categorías disponibles.</p>
                                }
                            </div>


                            @if (isLoading)
                            {
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="sr-only">Cargando...</span>
                                    </div>
                            }

                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                    <div class="alert alert-success mt-3">@successMessage</div>
                            }

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                    <div class="alert alert-danger mt-3">@errorMessage</div>
                            }

                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary" disabled="@(!AreRequiredFieldsValid)">Guardar</button>
                                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancelar</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Tabla de Productos -->
    @if (filteredProducts != null && filteredProducts.Any())
    {
        <table class="table table-products table-hover">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Categoría</th>
                    <th>Precio</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in GetPaginatedProducts())
                {
                    <tr class="@GetHighlightClass(product)">
                        <td>@product.Name</td>

                        @if(product.Category != null){
                            <td>@product.Category.Name</td>
                        }
                        else
                        {
                            <td>Sin categoría</td>
                        }

                        <td>$@product.Price</td>
                        <td class="buttons-edition">
                            <button class="btn btn-sm" @onclick="() => StartEditProduct(product)">
                                <i class="fas fa-pencil-alt"></i>
                            </button>
                            <button class="btn btn-sm" @onclick="() => ToggleFeatured(product)">
                                @if (product.IsFeatured)
                                {
                                    <i class="fas fa-star"></i>
                                }
                                else
                                {
                                    <i class="far fa-star"></i>
                                }
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(product.IdProduct)">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Botones de Paginación -->
        <div class="pagination-controls">
            <button @onclick="PreviousPage">
                <i class="fas fa-chevron-left"></i>
            </button>
            <span>Página @currentPage de @totalPages</span>
            <button @onclick="NextPage">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    }
    else
    {
        <p>No se encontraron productos.</p>
    }

    <!-- Tabla de Productos Destacados -->
    @if (featuredProducts != null && featuredProducts.Any())
    {
        <h4 class="title-featured">Productos Destacados</h4>

        <table class="table table-featured-products">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Categoría</th>
                    <th>Precio</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in featuredProducts)
                {
                    <tr>
                        <td>@product.Name</td>
                        @if(product.Category != null){
                            <td>@product.Category.Name</td>
                        }
                        else
                        {
                            <td>Sin categoría</td>
                        }
                        <td>$@product.Price</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private List<ProductDto> products = new List<ProductDto>();
    private List<ProductDto> filteredProducts = new List<ProductDto>();
    private List<ProductDto> featuredProducts = new List<ProductDto>();
    private List<CategoryDto> categories = new List<CategoryDto>();
    private List<ColorDto> availableColors = new List<ColorDto>();
    private List<string> selectedColors = new List<string>();
    private ProductDto editingProduct = new ProductDto();
    private bool errorFeaturedLimit = false;
    private string searchText = "";
    private bool isNewProduct = true;
    private bool isModalOpen = false;
    private int currentPage = 1;
    private int pageSize = 5; 
    private int totalPages = 1;
    private string successMessage = "";
    private string errorMessage = "";
    private bool isLoading = false;
    private const int MaxFeaturedProducts = 6;
    private IBrowserFile selectedFile;
    private string Image;
    private string colorInput;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await LoadCategories();
        categories = await categoryService.GetAllCategoriesWithSubCategoryCountAsync();
        CalculateTotalPages();
    }

    private bool AreRequiredFieldsValid
    {
        get
        {
            return !string.IsNullOrWhiteSpace(editingProduct.Name) &&
                   editingProduct.Price > 0 &&
                   !string.IsNullOrWhiteSpace(editingProduct.Description) &&
                   !string.IsNullOrWhiteSpace(editingProduct.Size);
        }
    }

    private async Task LoadProducts()
    {
        try
        {
            var productEntities = await productService.GetAllAsync();
            products = productEntities.Select(p => new ProductDto
                {
                    IdProduct = p.IdProduct,
                    Name = p.Name,
                    Description = p.Description,
                    Price = p.Price,
                    Size = p.Size,
                    Cod_Art = p.Cod_Art,
                    PriceType = p.PriceType,
                    IsFeatured = p.IsFeatured,
                    ImageUrls = p.ImageUrls,
                    Category = p.Category
                }).ToList();

            filteredProducts = products;
            featuredProducts = products.Where(p => p.IsFeatured).ToList();
            CalculateTotalPages();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar productos: {ex.Message}");
        }
    }

    protected void AddNewProduct()
    {
        editingProduct = new ProductDto
            {
                Name = "",
                Description = "",
                Price = 0,
                Size = "",
                Cod_Art = "",
                PriceType = "",
                ImageUrls = new List<string>()
          
            };

        isNewProduct = true;
        isModalOpen = true;
        successMessage = "";
        errorMessage = "";
    }
    protected async Task StartEditProduct(ProductDto product)
    {
        await LoadCategories();

        if (string.IsNullOrEmpty(product.IdProduct))
        {
            Console.WriteLine("Error: El producto no tiene un IdProduct válido.");
            return;
        }

        // Obtener el producto completo de la base de datos
        var fullProduct = await productService.GetByIdAsync(product.IdProduct);

        if (fullProduct == null)
        {
            Console.WriteLine("Error: No se pudo obtener el producto completo de la base de datos.");
            return;
        }

        editingProduct = new ProductDto
            {
                IdProduct = fullProduct.IdProduct,
                Name = fullProduct.Name,
                Description = fullProduct.Description,
                Price = fullProduct.Price,
                Size = fullProduct.Size,
                IsFeatured = fullProduct.IsFeatured,
                ImageUrls = fullProduct.ImageUrls ?? new List<string>(),
                Cod_Art = fullProduct.Cod_Art,
                PriceType = fullProduct.PriceType,
                IdCategory = fullProduct.IdCategory,
                Category = fullProduct.Category != null
                    ? new CategoryDto
                    {
                        IdCategory = fullProduct.Category.IdCategory,
                        Name = fullProduct.Category.Name
                    }
                    : null
            };

        Images = fullProduct.ImageUrls ?? new List<string>();
        isNewProduct = false;
        isModalOpen = true;
        StateHasChanged();
        successMessage = "";
        errorMessage = "";
    }
    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    private List<string> Images = new List<string>();
    private List<CategoryDto> Categories = new List<CategoryDto>();

    private async Task LoadCategories()
    {
        categories = await categoryService.GetAllAsync();
        StateHasChanged(); 
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFiles.Clear();
        selectedFiles.AddRange(e.GetMultipleFiles());

        // foreach (var file in selectedFiles)
        // {
        //     await PreviewImage(file);
        // }
    }

    private async Task<List<string>> UploadImages(List<IBrowserFile> files)
    {
        var uploadedUrls = new List<string>();

        foreach (var file in files)
        {
            try
            {
                var stream = file.OpenReadStream();
                var fileName = file.Name;
                var uploadImageUrl = await fs.UploadProductImageAsync(stream, fileName);
                if (!string.IsNullOrEmpty(uploadImageUrl))
                {
                    uploadedUrls.Add(uploadImageUrl);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al cargar la imagen: {ex.Message}");
                throw;
            }
        }

        return uploadedUrls;
    }

    private async Task PreviewImage(IBrowserFile file)
    {
        var buffers = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffers);
        string imageType = file.ContentType;
        var imageUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";
        Images.Add(imageUrl);
        StateHasChanged();
    }

    private async Task SaveImages()
    {
        if (selectedFiles.Any())
        {
            var uploadedUrls = await UploadImages(selectedFiles);
            editingProduct.ImageUrls.AddRange(uploadedUrls);
        }
    }

    private async Task SaveProduct()
    {
        isLoading = true;
        successMessage = "";
        errorMessage = "";

        try
        {
            List<Stream> imageStreams = new List<Stream>();
            if (selectedFiles.Any())
            {
                foreach (var file in selectedFiles)
                {
                    var stream = file.OpenReadStream();
                    imageStreams.Add(stream);
                }
            }

            if (isNewProduct)
            {
                var savedProduct = await productService.SaveAsync(editingProduct, imageStreams);
                if (savedProduct != null)
                {
                    ShowAlert("Producto agregado correctamente.");
                    editingProduct = savedProduct;
                }
                else
                {
                    ShowAlert("Hubo un problema al agregar el producto");
                }
            }
            else
            {
                var updatedProduct = await productService.UpdateAsync(editingProduct, imageStreams);
                if (updatedProduct != null)
                {
                    ShowAlert("Producto actualizado correctamente.");
                    editingProduct = updatedProduct;
                }
                else
                {
                    ShowAlert("Hubo un problema al actualizar el producto");
                }
            }

            isModalOpen = false;
            await LoadProducts();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    protected void CancelEdit()
    {
        isModalOpen = false;
    }

    protected async Task DeleteProduct(string id)
    {
        try
        {
            var success = await productService.DeleteAsync(id);
            if (success)
            {
                products.Remove(products.First(p => p.IdProduct == id));
                FilterProducts();
                Console.WriteLine("Producto eliminado exitosamente.");
            }
            else
            {
                Console.WriteLine("No se pudo eliminar el producto.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar el producto: {ex.Message}");
        }
    }

    protected async Task ToggleFeatured(ProductDto product)
    {
        try
        {
            var featuredProductsCount = GetFeaturedProductsCount();

            if (product.IsFeatured)
            {
                product.IsFeatured = false;
                await productService.UpdateAsync(product, null); // Pasa null si no hay imágenes
                await LoadProducts();
            }
            else
            {
                if (featuredProductsCount < MaxFeaturedProducts)
                {
                    product.IsFeatured = true;
                    await productService.UpdateAsync(product, null); // Pasa null si no hay imágenes
                    await LoadProducts();
                }
                else
                {
                    ShowAlert("Ya hay 6 productos destacados.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al destacar el producto: {ex.Message}");
            ShowAlert($"Error al destacar el producto: {ex.Message}");
        }
    }

    private int GetFeaturedProductsCount()
    {
        var products = GetPaginatedProducts(); 
        return products.Count(p => p.IsFeatured);
    }

    private void ShowAlert(string message)
    {
        JSRuntime.InvokeVoidAsync("alert", message);
    }
    private string GetHighlightClass(ProductDto product)
    {
        var recentProducts = products.OrderByDescending(p => p.IdProduct).Take(6).Select(p => p.IdProduct).ToList();
        return recentProducts.Contains(product.IdProduct) ? "highlight" : "";
    }

    protected void FilterProducts()
    {
        filteredProducts = products
            .Where(p => string.IsNullOrEmpty(searchText) || p.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .ToList();

        CalculateTotalPages(); 
        currentPage = 1; 
    }

    private List<ProductDto> GetPaginatedProducts()
    {
        return filteredProducts
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void CalculateTotalPages()
    {
        totalPages = (int)Math.Ceiling(filteredProducts.Count / (double)pageSize);
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void OnFeaturedChange()
    {
            if (featuredProducts.Count >= 6)
            {
                editingProduct.IsFeatured = false;
                errorFeaturedLimit = true;
                JSRuntime.InvokeVoidAsync("alert", "No se pueden destacar más de 6 productos.");
            }
            else
            {
                errorFeaturedLimit = false;
                editingProduct.IsFeatured = true;
            }
        }
}