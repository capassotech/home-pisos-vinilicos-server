@page "/contact-management"
@using home_pisos_vinilicos.Application
@using home_pisos_vinilicos.Application.DTOs
@using home_pisos_vinilicos.Application.Services
@using home_pisos_vinilicos.Domain.Entities
@using System.Net.Http.Json
@using System.Net.Http.Json
@inject IJSRuntime JSRuntime

@inject ContactService ContactService
@inject SocialNetworkService SocialNetworkService

<head>
    <link href="css/contactManagement.css" rel="stylesheet" />
</head>

<div class="container-management-contact">
    <h3 class="title-contact">Contact and Social Media Management</h3>
    <EditForm Model="@contactModel" OnValidSubmit="HandleValidSubmit" class="edit-form">
    <DataAnnotationsValidator />
    <ValidationSummary />

        <div class="form-group">
        <label for="address">Address:</label>
        <InputText id="address" @bind-Value="contactModel.Address" />
    </div>

        <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="contactModel.Email" />
    </div>

        <div class="form-group">
        <label for="phone">Phone:</label>
     <InputNumber id="phone" type=number @bind-Value="contactModel.Phone" />
   </div>

        <div class="form-group">
        <label for="googleMapsUrl">Google Maps URL:</label>
        <InputText id="googleMapsUrl" @bind-Value="googleMapsUrl" />
    </div>

        <div class="form-group">
        <label for="socialNetworkName">Social Network Name:</label>
        <InputText id="socialNetworkName" @bind-Value="socialNetwork.Name" />
    </div>

        <div class="form-group">
        <label for="socialNetworkLink">Social Network Link:</label>
        <InputText id="socialNetworkLink" @bind-Value="socialNetwork.Link" />
    </div>

    <button type="submit">Update Contact</button>
</EditForm>
</div>
@code {
    private ContactDto contactModel = new();
    private List<Contact> contacts = new();
    private Contact contactE = new();
    private SocialNetworkDto socialNetwork = new SocialNetworkDto();
    private string googleMapsUrl;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            contacts = await ContactService.GetAllAsync();

            if (contacts != null && contacts.Count > 0)
            {
                var firstContact = contacts.First();
                contactModel.IdContact = firstContact.IdContact;
                contactModel.Address = firstContact.Address;
                contactModel.Email = firstContact.Email;
                contactModel.Phone = firstContact.Phone;
                googleMapsUrl = GenerateGoogleMapsUrl(firstContact.Address); 

                socialNetwork.Name = "Nombre de Red Social"; 
                socialNetwork.Link = "https://enlace-red-social.com"; 
            }
            else
            {
                Console.WriteLine("No contacts found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar contactos: {ex.Message}");
        }
    }

    private void ShowAlert(string message)
    {
        JSRuntime.InvokeVoidAsync("alert", message);
    }
   

    private async Task HandleValidSubmit()
    {
        try
        {
            await ContactService.UpdateAsync(contactModel);
            ShowAlert("Contacto actualizado correctamente.");

        }
        catch (Exception ex)
        {
            ShowAlert("Hubo un problema al actualizar el Contacto");
            Console.WriteLine($"Error updating contact: {ex.Message}");
        }
    }

    private string GenerateGoogleMapsUrl(string address)
    {
        return $"https://www.google.com/maps/search/?api=1&query={Uri.EscapeDataString(address)}";
    }
}
