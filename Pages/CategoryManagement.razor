@page "/categorias"
@using home_pisos_vinilicos.Application
@using home_pisos_vinilicos.Application.DTOs
@using home_pisos_vinilicos.Application.Services
@using home_pisos_vinilicos.Domain.Entities
@using System.Net.Http.Json
@inject IJSRuntime JSRuntime
@inject CategoryService _categoryService


<head>
    <link href="css/categoryManagement.css" rel="stylesheet" />
    <title>Gestión de Categorías</title>
</head>

<div class="container-management-categories">
    <h3 class="title-categories">Gestión de Categorías</h3>
    <button type="submit" @onclick="AddCategory" class="button-add" aria-label="Click me">
        <i class="fas fa-plus"></i> Nueva categoría
    </button>



    @if (isModalVisible)
    {
        <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0, 0, 0, 0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(categoryModel.IdCategory == null ? "Agregar Categoría" : "Editar Categoría")</h5>
                        <button type="button" class="close" aria-label="Close" @onclick="CloseModal">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>

                    <div class="modal-body">
                        <EditForm Model="@categoryModel" OnValidSubmit="HandleValidSubmit" class="edit-form">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label for="name">Nombre</label>
                                <InputText id="name" class="form-control" @bind-Value="categoryModel.Name" required />
                                <ValidationMessage For="@(() => categoryModel.Name)" class="text-danger" />
                            </div>

                            <div class="form-group">
                                <label for="description">Descripción</label>
                                <InputText id="description" class="form-control" @bind-Value="categoryModel.Description" required />
                                <ValidationMessage For="@(() => categoryModel.Description)" class="text-danger" />
                            </div>

                            <div class="form-group form-check">
                                <InputCheckbox id="isFeatured" class="form-check-input" @bind-Value="categoryModel.IsFeatured" @onchange="OnFeaturedChange" />
                                <label for="isFeatured" class="form-check-label">¿Destacado?</label>
                                @if (errorFeaturedLimit)
                                {
                                    <div class="text-danger mt-2">No se pueden destacar más de 2 categorías.</div>
                                }
                            </div>

                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary">Guardar</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }


    <!-- Tarjetas de Categorías -->
    @if (categories != null && categories.Any())
    {
        <div class="cards-container">
            @foreach (var category in categories)
            {
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">@category.Name</h3>
                        @if (category.IsFeatured)
                        {
                            <span class="featured-indicator"><i class="fas fa-star"></i></span>
                        }
                    </div>
                    <div class="card-actions">
                        <button class="card-button edit-button" @onclick="() => EditCategory(category)" aria-label="Editar categoría">
                            <i class="fas fa-pencil-alt"></i>
                        </button>
                        <button class="card-button star-button" @onclick="() => ToggleFeatured(category)" aria-label="@(category.IsFeatured ? "Quitar de destacados" : "Marcar como destacado")">
                            <i class="@(category.IsFeatured ? "fas fa-star" : "far fa-star")"></i>
                        </button>
                        <button class="card-button delete-button" @onclick="() => DeleteCategory(category.IdCategory)" aria-label="Eliminar categoría">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            }
        </div>

        <!-- Controles de paginación -->
        <div class="pagination-controls">
            <button @onclick="PreviousPage" disabled="@(HasPreviousPage)">
                <i class="fas fa-chevron-left"></i>
            </button>
            <span>Página @CurrentPage de @TotalPages</span>
            <button @onclick="NextPage" disabled="@(HasNextPage)">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    }
    else
    {
        <p>Cargando...</p>
    }

    <!-- Tarjetas de Categorías Destacadas -->
    @if (categories != null && categories.Any(c => c.IsFeatured))
    {
        <h4 class="title-featured">Categorías Destacadas</h4>
        <div class="cards-container">
            @foreach (var category in categories.Where(c => c.IsFeatured))
            {
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">@category.Name</h3>
                        <span class="featured-indicator"><i class="fas fa-star"></i></span>
                    </div>
                    <div class="card-actions">
                        <button class="card-button edit-button" @onclick="() => EditCategory(category)" aria-label="Editar categoría">
                            <i class="fas fa-pencil-alt"></i>
                        </button>
                        <button class="card-button star-button" @onclick="() => ToggleFeatured(category)" aria-label="Quitar de destacados">
                            <i class="fas fa-star"></i>
                        </button>
                        <button class="card-button delete-button" @onclick="() => DeleteCategory(category.IdCategory)" aria-label="Eliminar categoría">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            }
        </div>
    }









</div>
@code {
    private Category currentCategory = new();
    private CategoryDto categoryModel = new();
    private bool isAddingCategory = false;
    private bool isEditingCategory = false;
    private const int MaxFeaturedCategories = 2; 
    private List<int> subCategoryCounts = new();
    private bool isModalVisible = false;
    private List<CategoryDto> categories = new();
    private bool errorFeaturedLimit = false;

    // Paginación
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10; 
    private int TotalCategories { get; set; } = 0; 
    private int TotalPages => (int)Math.Ceiling((double)TotalCategories / PageSize);
    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        var allCategories = await _categoryService.GetAllAsync();
        TotalCategories = allCategories.Count;
        categories = allCategories.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    }
    private async Task PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
            await LoadCategories();
        }
    }

    private async Task NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
            await LoadCategories();
        }
    }
    protected async Task ToggleFeatured(CategoryDto category)
    {
        try
        {
            var featuredCategoriesCount = GetFeaturedCategoriesCount();

            if (!category.IsFeatured && featuredCategoriesCount >= MaxFeaturedCategories)
            {
                ShowAlert("Ya hay 2 categorías destacadas.");
                return;
            }

            category.IsFeatured = !category.IsFeatured;
            await _categoryService.UpdateAsync(category);
            await LoadCategories();
        }
        catch (Exception ex)
        {
            ShowAlert($"Error al actualizar la categoría: {ex.Message}");
        }
    }


    private void ShowEditCategoryModal(Category category)
    {
        categoryModel = new CategoryDto
            {
                IdCategory = category.IdCategory,
                Name = category.Name,
                Description = category.Description,
                IsFeatured = category.IsFeatured
            };
        isModalVisible = true;
    }

    private void ShowAddCategoryModal()
    {
        categoryModel = new CategoryDto();
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (string.IsNullOrEmpty(categoryModel.IdCategory))
            {
                await _categoryService.SaveAsync(categoryModel);
                ShowAlert("Categoría añadida correctamente.");
            }
            else
            {
                await _categoryService.UpdateAsync(categoryModel);
                ShowAlert("Categoría actualizada correctamente.");
            }

            await LoadCategories();
            isModalVisible = false;
        }
        catch (Exception ex)
        {
            ShowAlert($"Error al guardar la categoría: {ex.Message}");
        }
    }

    private int GetFeaturedCategoriesCount()
    {
        return categories.Count(c => c.IsFeatured);
    }

    private void ShowAlert(string message)
    {
        Console.WriteLine(message);
        JSRuntime.InvokeVoidAsync("alert", message);

    }

 
    private void AddCategory()
    {
        currentCategory = new Category();
        isAddingCategory = true;
        isEditingCategory = false;
        ShowAddCategoryModal(); 
    }

  private void EditCategory(CategoryDto category)
{
    categoryModel = new CategoryDto
    {
        IdCategory = category.IdCategory,
        Name = category.Name,
        Description = category.Description,
        IsFeatured = category.IsFeatured
    };
    isModalVisible = true;
}
    private async Task SaveCategory()
    {
        var categoryDto = new CategoryDto
            {
                IdCategory = currentCategory.IdCategory,
                Name = currentCategory.Name,
                Description = currentCategory.Description,
                IsFeatured = currentCategory.IsFeatured,
                //IdSubCategory = currentCategory.IdSubCategory
            };

        if (isAddingCategory)
        {
            await _categoryService.SaveAsync(categoryDto);

        }
        else
        {
            await _categoryService.UpdateAsync(categoryDto);

        }

        await LoadCategories();
        isAddingCategory = false;
        isEditingCategory = false;
    }


    private void Cancel()
    {
        isAddingCategory = false;
        isEditingCategory = false;
    }

    private async Task DeleteCategory(string idCategory)
    {
        try
        {
            await _categoryService.DeleteAsync(idCategory);
            ShowAlert("Categoría eliminada correctamente.");
            await LoadCategories();
        }
        catch (Exception ex)
        {
            ShowAlert($"Error al eliminar la categoría: {ex.Message}");
        }
    }


    private async Task ToggleFeatured(CategoryDto category, bool isFeatured)
    {
        try
        {
            category.IsFeatured = isFeatured;
            await _categoryService.UpdateAsync(category);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al destacar la categoría: {ex.Message}");
        }
    }
    private void OnFeaturedChange(ChangeEventArgs e)
    {
        var isFeatured = (bool)e.Value;
        var featuredCategoriesCount = categories.Count(c => c.IsFeatured);

        if (isFeatured && featuredCategoriesCount >= MaxFeaturedCategories)
        {
            errorFeaturedLimit = true;
            ShowAlert("No se pueden destacar más de 2 categorías.");
            categoryModel.IsFeatured = false;
        }
        else
        {
            errorFeaturedLimit = false;
            categoryModel.IsFeatured = isFeatured;
        }
    }

}

